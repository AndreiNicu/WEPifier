package main;
import wepifier.*;
import java.awt.Dimension;
import java.io.IOException;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.net.UnknownHostException;
import javax.swing.JDialog;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import main.FilterData;
import main.RunApplication;
/**
 * 
 * @author Team8
 * (Still under development)
 *	Meant to read csv files generated by the aircrack-ng and offer user
 *	select target options
 *	This class is also known as Sniffer class
 */

public class NetworkScanner extends JDialog{
	private JTextArea log;
	private JScrollPane logPane;
	private JDialog diag;
	private String ID;
        private String MAC;
	private FilterData fd;
	public NetworkScanner()
	{
		log = new JTextArea();
		logPane = new JScrollPane(log);
		fd = new FilterData();
		diag = new JDialog();
		diag.setPreferredSize(new Dimension (300,400));
		diag.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
		diag.add(logPane);
		diag.setVisible(true);
		diag.pack();
		readNetworkInterfaces();
	}
        public void setTarget(int index){ID= fd.getBSSIDAtIndex(index);}
        
        public String getTarget(){return ID;}
        public int getNumberOf(){return fd.getSizeOfBssid();} 
        public String getIdAt(int i){return fd.getBSSIDAtIndex(i);}
        public String[] getTargets(){
            String temp[] = new String[fd.getBSSID().length];
            for(int i=0;i<temp.length;i++)
                temp[i]=fd.getBSSIDAtIndex(i) + "  -  "+fd.getESSIDAtIndex(i);
            return temp;
        }
	public void readNetworkInterfaces()
	{
                 fd = new FilterData("dump-01.kismet.csv");
		log.setText(fd.getData());
	}
	public void startSniffer()
	{
		 new Sniffer();
	}
                 /*
		 * 1)setStopMode
		 * 2)setProcName
		 * 3)setParam
		 * 4)setRuntime
		 * 5)setPrintMode
		 */
        public String getMAC()
        {
            
            try {
		NetworkInterface network = NetworkInterface.getByName("wlan0");
                System.out.println("This is a messege (Cpt. Obvious)!");
		byte[] mac=network.getHardwareAddress();
                System.out.println("hello"+" "+mac.toString());
                String str = "";
                String MAC="";
                for(int i=0;i<mac.length;i++)
                  {
                      str+=Integer.toHexString((int)mac[i])+":";
                  }
                for(int i=0;i<str.length();i++)
                {
                    char c = str.charAt(i);
                    if(c==':'){
                        MAC+=str.charAt(i-2)+""+str.charAt(i-1);
                        if((i+1)<str.length())
                            MAC+=":";
                    }
                }
                return MAC;
            }  
            catch (SocketException e) {
		System.out.println("Could not find such device!");
		e.printStackTrace();
			}
            
            
            return null;
        }
	private class Sniffer
	{
		/*
		 * 1)setStopMode
		 * 2)setProcName
		 * 3)setParam
		 * 4)setRuntime
		 * 5)setPrintMode
		 */
		public Sniffer()
		{
			Thread t = new Thread(){
				public void run()
				{
					int i=0;
					boolean first = true;
					Process p = null;
					while(diag.isVisible()){
						if(first){
							try {
								p = Runtime.getRuntime().exec
					("xterm -title Sniffer -bg black -fg red -iconic -e airodump-ng --bssid "+ID+" -w read mon0");
							} catch (IOException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							try {
								Thread.sleep(1000);
							} catch (InterruptedException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							first=false;
						}
						i++;
						FilterData fl = new FilterData("read-01.csv");
						try {
							Thread.sleep(200);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						log.setText(fl.getData()+"\n "+i);
					}
					p.destroy();
				}
			};
			t.start();
		}
	}
}